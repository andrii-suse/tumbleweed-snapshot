#!/usr/bin/env bash

SCRIPT="$(cd "${0%/*}" && echo "$PWD")/${0##*/}"
SYNC_DIR="/srv/www/htdocs/opensuse"
SNAPSHOT_DIR="/srv/www/htdocs/snapshot"
SNAPSHOT_AGE_MAX=100

sync()
{
  rsync \
    --recursive \
    --links \
    --times \
    --delete \
    --itemize-changes \
    --no-motd \
    --include-from "$(dirname $SCRIPT)/rsync/$1.txt" \
    suse.mobile-central.org::opensuse \
    "$SYNC_DIR/"
#     rsync.opensuse.org::opensuse-full-with-factory/opensuse/ \
}

snapshot_list()
{
  local ISO_DIR="$SYNC_DIR/tumbleweed/iso"
  local TODAY=$(date +%Y%m%d)
  local MONTH=$(date +%Y%m)
  snapshots=()

  for snapshot in $(find "$ISO_DIR" -name "Changes.*.txt" | grep -oP "\d+" | sort -r) ; do
    # Changes files are sorted largest to smallest so once a snapshot is
    # encountered that is older than AGE_MAX stop looping.
    if [ $(( $TODAY - $snapshot )) -gt $SNAPSHOT_AGE_MAX ] ; then
      break
    fi
    snapshots+=($snapshot)
  done

  # Append snapshot_latest if not already included. This should always occur
  # since OBS should publish before rsync updates the iso directory.
  if [ "${snapshots[0]}" != "$snapshot_latest" ] ; then
    echo "latest snapshot not included in ISO list as expect and thus it will be added"
    snapshots=("$snapshot_latest" ${snapshots[@]})
  fi

  echo "${#snapshots[@]} snapshots of interest"
  printf '%s\n' "${snapshots[@]}" > "$SNAPSHOT_DIR/list"
}

snapshot_create()
{
  # Always symlink latest snapshot to SYNC_DIR.
  if [ ! -e "$SNAPSHOT_DIR/${snapshots[0]}" ] ; then
    ln -s "../$(basename "$SYNC_DIR")" "$SNAPSHOT_DIR/${snapshots[0]}"
  fi
  echo "${snapshots[0]}: linked to current"

  cd "$SYNC_DIR"
  local i=0
  local snapshots=(${snapshots[@]:1}) # remove latest snapshot since already handled
  for snapshot in ${snapshots[@]} ; do
    echo -n $snapshot

    local snapshot_older=${snapshots[$i+1]}
    local dir="$SNAPSHOT_DIR/$snapshot"

    if [ -L "$dir" ] ; then
      # Symlink indicates it was pointing to latest and should be snapshotted.
      echo ": snapshotted"
      rm "$dir"
      mkdir "$dir"

      # Mirror the directory structure while symlinking any files that are
      # present in previous snapshot dir and do not have a newer modification
      # time. After looking at various tools and methods none seem to generate
      # the desired structure. Rsync can come close by generating the same
      # structure, but with hardlinks. Given hardlinks are cumbersome to mirror
      # and it is not too difficult to write it seemed reasonable to do so.
      # Additionally, symlinks will make it easier to collect statistics on
      # snapshot size and exact number of packages that differ.

      # Cut removes the beginning ./ from paths.
      find . ! -path . | cut -sd / -f 2- |  while read file ; do
        if [ -d "$file" ] ; then
          mkdir -p "$dir/$file"
        else
          # Not sure if rebuilds that produce the same rpm have modification
          # time updated. If so then it probably makes sense to special case
          # rpms by copying modification time and assuming the same file name
          # indicates the same contents to avoid an expensive compare.
          # -e does not include symlinks so a two part "exists" is used.
          if [[ ( -e "$SNAPSHOT_DIR/$snapshot_older/$file" || -L "$SNAPSHOT_DIR/$snapshot_older/$file" ) &&
              ! "$file" -nt "$SNAPSHOT_DIR/$snapshot_older/$file" ]] ; then
            ln -s "../$snapshot_older/$file" "$dir/$file"
          else
            cp -p "$file" "$dir/$file"
          fi
        fi
      done
    elif [ -d "$dir" ] ; then
      echo ": exists"
    else
      echo ": missing"
    fi

    ((i++))
  done

  cd - > /dev/null

  # Cleaned up snapshots that are older than the max age. Pick the last
  # supported snapshot from the list and replace all symlinks with real files.
  local snapshot_last=${snapshots[$i-1]}
  if [ -d "$SNAPSHOT_DIR/$snapshot_last" ] ; then
    for link in $(find "$SNAPSHOT_DIR/$snapshot_last" -type l) ; do
      dir="$(dirname "$link")"
      real="$(readlink -e "$link")"
      rm "$link"
      mv "$real" "$dir"
    done

    # Remove all old snapshot directories since they should no longer be
    # referenced after the symlink cleanup.
    for f in "$SNAPSHOT_DIR"/* ; do
      if [ -d "$f" ] && [ $(basename "$f") -lt $snapshot_last ] ; then
        echo "$(basename "$f"): removed"
        rm -rf "$f"
      fi
    done
  fi
}

if [ ! -d "$SNAPSHOT_DIR" ] ; then
  mkdir "$SNAPSHOT_DIR"
fi

# Check openSUSE:Factory/snapshot for the current openSUSE-release package
# version. This should be the earliest indicator that a snapshot has been
# released. Given that rysnc will not immediately have all files available it
# seems like the most reliable method rather than rysncing just the iso/Changes*
# files. Tumbleweed should publish once a snapshot so the already sync'd files
# should represent the previous snapshot and non-factory repositories may begin
# rebuilding once the snapshot repository has updated.
release=$(osc list -b openSUSE:Factory _product:openSUSE-release snapshot x86_64 | \
  grep -oP "openSUSE-release-\K([^-]+)(?=-[^-]+\.src\.rpm)")

if [ ! -f "$SNAPSHOT_DIR/latest" ] ; then
  snapshot_latest=0
else
  snapshot_latest=$(cat "$SNAPSHOT_DIR/latest")
fi

if [ "$release" != "$snapshot_latest" ] ; then
  echo "new snapshot $release published on OBS"
  echo "$release" > "$SNAPSHOT_DIR/latest"
  snapshot_latest="$release"
  snapshot_list
  snapshot_create
fi

# Since the script should be called repeatedly this should eventually complete.
sync "include-tumbleweed"
